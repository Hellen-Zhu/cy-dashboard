name: Deploy Sorry Cypress

on:
  push:
    branches:
      - master
    tags:
      - v*
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_rebuild:
        description: '强制重新构建所有镜像'
        required: false
        default: false
        type: boolean

jobs:
  # 测试和构建
  test-and-build:
    runs-on: ubuntu-latest
    if: '!contains(toJSON(github.event.commits.*.message), ''[skip ci]'')'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: v1-${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-${{ runner.os }}-yarn-

      - name: Cache turbo build
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linting
        run: yarn lint

      - name: Generate GraphQL types
        run: yarn generate

      - name: Run tests
        run: yarn test

      - name: Build packages
        run: yarn build

  # 构建和推送 Docker 镜像
  build-and-push-images:
    needs: test-and-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, dashboard, director]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build and push ${{ matrix.service }}
        run: ./scripts/release-dockerhub.sh -s ${{ matrix.service }}

  # 部署到目标环境
  deploy:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          echo "部署环境: ${{ github.event.inputs.environment || 'production' }}"
          echo "强制重建: ${{ github.event.inputs.force_rebuild || 'false' }}"

      # 这里可以添加具体的部署步骤
      # 例如：部署到 Kubernetes、AWS、GCP 等
      - name: Deploy to ${{ github.event.inputs.environment || 'production' }}
        run: |
          echo "开始部署到 ${{ github.event.inputs.environment || 'production' }} 环境"
          # 添加您的部署脚本
          # 例如：kubectl apply、terraform apply 等

      - name: Health check
        run: |
          echo "执行健康检查..."
          # 添加健康检查脚本
          # 例如：curl 检查服务状态

  # 通知部署结果
  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment result
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ 部署成功"
            # 可以添加 Slack、钉钉等通知
          else
            echo "❌ 部署失败"
            # 可以添加失败通知
          fi 